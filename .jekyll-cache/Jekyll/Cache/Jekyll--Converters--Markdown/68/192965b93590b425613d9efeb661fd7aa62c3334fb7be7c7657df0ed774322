I"˙<blockquote>
  <p>Wen stellen Sie ein: Den tollen Programierer, der aber kommunikativ schw√§chelt oder den technisch nur mittelm√§ssigen aber sozial-kompetenten Kandidaten?</p>
</blockquote>

<p>‚ÄúDen sozial-kompetenten Bewerber‚Äù, beantwortet Thomas Nanzer die Frage eines Informatik-Studierenden ohne zu z√∂gern.</p>

<p>Er ist Head R&amp;D Software Development bei der <a href="http://www.sensirion.com/">Sensirion AG</a>, einer Firma, die Sensor- und Softwarel√∂sungen herstellt. Unter anderem hat die Firma ein Bauteil f√ºr das weltweit erfolgreiche Mobiltelefon Samsung Galaxy S4 produziert.</p>

<p>Nanzer verwendet viel Zeit darauf, neue Mitarbeitende zu rekrutieren. Dabei achtet er vor allem darauf, dass er nicht nur technisch versierte, sondern m√∂glichst auch team-kompatible Mitarbeitende anheuert.</p>

<p>Die Erfahrung hat ihn gelehrt, dass oft gerade die technisch talentiertesten Team-Mitglieder bei den sogenannten Soft Skills L√ºcken aufweisen. Kann oder will ein Entwickler nicht mit anderen √ºber seine Aufgaben sprechen, ist er wertlos oder gar sch√§dlich f√ºr die Firma.</p>

<p>Deshalb achtet Thomas Nanzer darauf, dass k√ºnftige Mitarbeitende, nicht nur eine solide technische Basis mitbringen, sondern auch kommunikatives Gesp√ºr und Team-F√§higkeit an den Tag legen.</p>

<p>Die folgenden Tipps basieren auf einem Vortrag, den Thomas Nanzer im Rahmen der <a href="https://www.hslu.ch/de-ch/technik-architektur/campus/veranstaltungen/2015/04/15/informatik-top-themen-2015-04-15/">Veranstaltungsreihe Hot Topics</a> an der Hochschule Luzern gehalten hat:</p>

<h2 id="technische-basis">Technische Basis</h2>

<ul>
  <li>Als Kandidat ben√∂tigst du ein starkes technisches Fundament.</li>
  <li>Du musst lernbereit sein. Denn gerade die IT-Industrie entwickelt sich rasant. Lernpausen gehen praktisch nicht mehr.</li>
  <li>Du musst Priorit√§ten setzen k√∂nnen. Lerne nur, was du mehrmals oder √ºber l√§ngere Zeit brauchen kannst, so die Devise. Dazu geh√∂ren die Kunst des Clean Code, Architekturen und ihr Konsequenzen, Design Patterns und ihre Anwendbarkeit sowie die F√§higkeit Abstraktionen erkennen und entwickeln zu k√∂nnen.</li>
  <li>Du musst technische Dinge erkl√§ren k√∂nnen.</li>
</ul>

<blockquote>
  <p>In Bewerbungsgespr√§chen, stelle ich Fragen zum Software Design. Mich interessiert, ob Bewerber die grundlegenden Prinzipien von Software verinnerlicht haben. Ob sie zehn Programmier-Sprachen beherrschen ist mir vorerst egal.</p>
</blockquote>

<h2 id="pers√∂nliche-kompetenzen">Pers√∂nliche Kompetenzen</h2>

<ul>
  <li><strong>Suche Fehler</strong>: Erfolgreiche Mitarbeitende suchen Fehler. Und sie fangen bei sich selbst damit an.</li>
  <li><strong>Mach Fehler</strong>: Erfolgreiche Mitarbeitende machen Fehler. Gew√∂hn dich dran. Lerne daraus. Und mach weiter.</li>
  <li><strong>Sei zuverl√§ssig</strong>: Wenn du eine Arbeit nicht bis zur Deadline schaffen kannst, sag es so fr√ºh wie m√∂glich.</li>
  <li><strong>Sei flexibel</strong>: Job-Beschreibungen sind l√§ngst nicht mehr in Stein gemeisselt. Sei nicht dogmatisch und mach auch die Dinge, die nicht zu deinen Kernkompetenzen geh√∂ren. So lernst du dazu.</li>
  <li><strong>Sei kreativ</strong>: Wenn du nicht beizeiten fertig wirst, finde einen anderen Weg.</li>
  <li><strong>Hinterfrage alles</strong>: Nimm Auftr√§ge und Anforderungen nicht als gottgegeben. Frage dich: Braucht es dieses Feature wirklich? Was will der Auftraggeber erreichen? Gibt es einen besseren Weg? Du musst Leute von undurchdachten oder unm√∂glich teuren W√ºnschen abbringen k√∂nnen.</li>
  <li><strong>Steh hinter dem Projekt</strong>: F√ºhle dich verantwortlich f√ºr deine Arbeit und das gesamte Projekt. Versuche dich immer zu verbessern. Lerne, effizienter zum Ergebnis zu kommmen.</li>
</ul>

<h2 id="team-skills">Team Skills</h2>

<blockquote>
  <p>Im Arbeitsleben erreichst du nichts alleine. Gew√∂hne dich also an Kollaboration. H√∂re zu und frage nach.</p>
</blockquote>

<ul>
  <li>Wenn ein Projekt in Schieflage ger√§t, frage dich warum. Und: Sei dir im klaren dar√ºber, wie du zum Misserfolg beitr√§gst!</li>
  <li>Sei dir immer bewusst, dass es nicht deine technischen Skills sind, die dich erfolgreich machen im Beruf. Sie sind lediglich die Grundlage.</li>
</ul>

<h3 id="zwei-techniken-f√ºr-besseres-zuh√∂ren">Zwei Techniken f√ºr besseres Zuh√∂ren</h3>

<ul>
  <li><strong>Wiederhole, was du verstehst.</strong> Du k√∂nntest dich verh√∂rt oder etwas verwechselt haben. Lass dich korrigieren und versuche es noch einmal.</li>
  <li><strong>Unterbrich deinen Gespr√§chspartner</strong>: Sobald du etwas nicht verstehst, unterbrich und frag nach. Besonders, wenn es sich nach einer dummen Frage anh√∂rt.</li>
</ul>

<h2 id="zwei-misserfolge-f√ºnf-erkenntnisse">Zwei Misserfolge, f√ºnf Erkenntnisse</h2>

<p>Thomas Nanzer lebt vor, was er predigt. Er skizziert zwei fehlgeschlagene Projekte und zeigt, dass sie nicht an der technischen Kompetenz der Mitarbeitenden, sondern an mangelnder Kommunikation und zu begrenztem Verantwortungsbewusstsein gescheitert sind.</p>

<ul>
  <li>Jedes Team ben√∂tigt jemanden, der <strong>zwischen Spezialisten vermitteln</strong> und √ºbersetzen kann; jemanden, der die Differenzen zwischen ihnen als solche erkennt und darauf hinweist.</li>
  <li>Eine unvollst√§ndige Spezifikation am Anfang eines Projekts ist kein Problem. Aber solange du keine klare Vorstellung von den Zielen, von der <strong>Vision</strong> hast, solltest du nicht zu arbeiten anfangen.</li>
  <li>Jeder im Team muss neue <strong>Anforderungen √ºberpr√ºfen</strong>. Nicht immer sind sie mit der Vision f√ºr das Projekt kompatibel.</li>
  <li><strong>Iterative Arbeitsweisen</strong> bewahren niemanden davor mitten im Projekt noch einmal die Architektur des ganzen Projekts zu √ºberdenken.</li>
  <li>Lass dich nicht von <strong>L√∂sungs-Ideen</strong> beeinflussen. Versuche stattdessen das zu l√∂sende Problem zu verstehen und finde selber heraus, wie du es am besten bew√§ltigst.</li>
</ul>

<h2 id="wo-lernen-programmierer-kommunikation">Wo lernen Programmierer Kommunikation?</h2>

<p>Wichtig, aber nicht allein entscheidend f√ºr den Erfolg im Beruf sei der Studienweg, so Thomas Nanzer:</p>

<p>Bewerber, die eine universit√§re Ausbildung absolviert haben, seien oft schnell, anpassungsf√§hig, stresserprobt und theoretisch versierte Schnelllerner.</p>

<p>Absolventen der st√§rker praxisorientierten Fachhochschulen h√§tten dagegen den Vorteil, dass sie vor und w√§hrend ihrer Studienzeit berufst√§tig sein k√∂nnen. Ihre pers√∂nliche und professionelle Erfahrung k√∂nne im Bewerbungsgespr√§ch ‚Äì gerade wegen der immer wichtiger werdenden Soft Skills ‚Äì das entscheidende Z√ºnglein an der Wage sein.</p>

<p>Zuletzt gilt aber: Wer die technischen Basics mitbringt, flexibel ist und sich in ein Team einpassen kann, lernt auch noch im Job wie Zuh√∂ren, Nachfragen und Durchsetzen geht.</p>
:ET